/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Enrollment } from "./Enrollment";
import { EnrollmentCountArgs } from "./EnrollmentCountArgs";
import { EnrollmentFindManyArgs } from "./EnrollmentFindManyArgs";
import { EnrollmentFindUniqueArgs } from "./EnrollmentFindUniqueArgs";
import { CreateEnrollmentArgs } from "./CreateEnrollmentArgs";
import { UpdateEnrollmentArgs } from "./UpdateEnrollmentArgs";
import { DeleteEnrollmentArgs } from "./DeleteEnrollmentArgs";
import { Course } from "../../course/base/Course";
import { Student } from "../../student/base/Student";
import { EnrollmentService } from "../enrollment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Enrollment)
export class EnrollmentResolverBase {
  constructor(
    protected readonly service: EnrollmentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Enrollment",
    action: "read",
    possession: "any",
  })
  async _enrollmentsMeta(
    @graphql.Args() args: EnrollmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Enrollment])
  @nestAccessControl.UseRoles({
    resource: "Enrollment",
    action: "read",
    possession: "any",
  })
  async enrollments(
    @graphql.Args() args: EnrollmentFindManyArgs
  ): Promise<Enrollment[]> {
    return this.service.enrollments(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Enrollment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Enrollment",
    action: "read",
    possession: "own",
  })
  async enrollment(
    @graphql.Args() args: EnrollmentFindUniqueArgs
  ): Promise<Enrollment | null> {
    const result = await this.service.enrollment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Enrollment)
  @nestAccessControl.UseRoles({
    resource: "Enrollment",
    action: "create",
    possession: "any",
  })
  async createEnrollment(
    @graphql.Args() args: CreateEnrollmentArgs
  ): Promise<Enrollment> {
    return await this.service.createEnrollment({
      ...args,
      data: {
        ...args.data,

        course: args.data.course
          ? {
              connect: args.data.course,
            }
          : undefined,

        student: args.data.student
          ? {
              connect: args.data.student,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Enrollment)
  @nestAccessControl.UseRoles({
    resource: "Enrollment",
    action: "update",
    possession: "any",
  })
  async updateEnrollment(
    @graphql.Args() args: UpdateEnrollmentArgs
  ): Promise<Enrollment | null> {
    try {
      return await this.service.updateEnrollment({
        ...args,
        data: {
          ...args.data,

          course: args.data.course
            ? {
                connect: args.data.course,
              }
            : undefined,

          student: args.data.student
            ? {
                connect: args.data.student,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Enrollment)
  @nestAccessControl.UseRoles({
    resource: "Enrollment",
    action: "delete",
    possession: "any",
  })
  async deleteEnrollment(
    @graphql.Args() args: DeleteEnrollmentArgs
  ): Promise<Enrollment | null> {
    try {
      return await this.service.deleteEnrollment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Course, {
    nullable: true,
    name: "course",
  })
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "read",
    possession: "any",
  })
  async getCourse(
    @graphql.Parent() parent: Enrollment
  ): Promise<Course | null> {
    const result = await this.service.getCourse(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Student, {
    nullable: true,
    name: "student",
  })
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "read",
    possession: "any",
  })
  async getStudent(
    @graphql.Parent() parent: Enrollment
  ): Promise<Student | null> {
    const result = await this.service.getStudent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
